name: CI

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:

permissions:
  contents: write   # for release uploads on tags
  packages: write   # allow GHCR pushes if needed by future steps
  actions: read

env:
  GO_VERSION: "1.22.x"
  MODULE: "github.com/platformbuilds/telegen"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go fmt
        run: |
          fmt_out=$(gofmt -s -l .)
          if [ -n "$fmt_out" ]; then
            echo "$fmt_out"
            echo "Run: gofmt -s -w ."
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

  test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Unit tests (race + coverage)
        run: |
          mkdir -p dist
          go test -race -covermode=atomic -coverprofile=dist/coverage.out ./...
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: dist/coverage.out
          retention-days: 14

  build-linux:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Compose ldflags
        id: ld
        run: |
          VERSION="${GITHUB_REF_TYPE == 'tag' && startsWith(github.ref_name, 'v') && echo "${GITHUB_REF_NAME}" || echo "v0.0.0-dev"}"
          COMMIT="$(git rev-parse --short=12 HEAD)"
          BUILDDATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "LDFLAGS=-X ${MODULE}/internal/version.version=${VERSION} -X ${MODULE}/internal/version.commit=${COMMIT} -X ${MODULE}/internal/version.buildDate=${BUILDDATE}" >> $GITHUB_OUTPUT

      - name: Build linux/amd64
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "-s -w ${{ steps.ld.outputs.LDFLAGS }}" -o dist/telegen ./cmd/telegen

      - name: Upload linux binary
        uses: actions/upload-artifact@v4
        with:
          name: telegen-linux-amd64
          path: dist/telegen
          retention-days: 14

  build-matrix:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        goos: [ linux, darwin, windows ]
        goarch: [ amd64, arm64 ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Compose ldflags
        id: ld
        run: |
          VERSION="${GITHUB_REF_NAME}"
          COMMIT="$(git rev-parse --short=12 HEAD)"
          BUILDDATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "LDFLAGS=-X ${MODULE}/internal/version.version=${VERSION} -X ${MODULE}/internal/version.commit=${COMMIT} -X ${MODULE}/internal/version.buildDate=${BUILDDATE}" >> $GITHUB_OUTPUT

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          OUT="telegen"
          if [ "${{ matrix.goos }}" = "windows" ]; then OUT="telegen.exe"; fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -trimpath -ldflags "-s -w ${{ steps.ld.outputs.LDFLAGS }}" \
            -o "dist/${OUT}-${{ matrix.goos }}-${{ matrix.goarch }}" ./cmd/telegen

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telegen-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-matrix]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p upload
          find dist -type f -maxdepth 2 -mindepth 2 -exec cp {} upload/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true
          files: upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
