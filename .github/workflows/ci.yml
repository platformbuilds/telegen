# .github/workflows/ci.yml
name: CI
on:
  push:
    branches: [ "**" ]
    tags:     [ "mark-v*" ]
  pull_request:

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.22.x"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }}, cache: true }
      - name: gofmt
        run: |
          out=$(gofmt -s -l .); if [[ -n "$out" ]]; then echo "$out"; exit 1; fi
      - run: go vet ./...

  test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }}, cache: true }
      - run: |
          mkdir -p dist
          go test -race -covermode=atomic -coverprofile=dist/coverage.out ./...
      - uses: actions/upload-artifact@v4
        with: { name: coverage, path: dist/coverage.out, retention-days: 14 }

  build-linux:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }}, cache: true }
      - name: Compute version
        id: v
        uses: ./.github/actions/compute-version
      - name: Build linux/amd64
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 \
            go build -trimpath -ldflags "-s -w ${{ steps.v.outputs.LDFLAGS }}" \
            -o dist/telegen ./cmd/telegen
      - uses: actions/upload-artifact@v4
        with: { name: telegen-linux-amd64, path: dist/telegen, retention-days: 14 }

  build-matrix:
    if: startsWith(github.ref, 'refs/tags/mark-v')
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        goos:   [ linux, darwin, windows ]
        goarch: [ amd64, arm64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }}, cache: true }
      - name: Compute version
        id: v
        uses: ./.github/actions/compute-version
      - name: Build (matrix)
        shell: bash
        run: |
          mkdir -p dist
          OUT="telegen"; [[ "${{ matrix.goos }}" == "windows" ]] && OUT="telegen.exe"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -trimpath -ldflags "-s -w ${{ steps.v.outputs.LDFLAGS }}" \
            -o "dist/${OUT}-${{ matrix.goos }}-${{ matrix.goarch }}" ./cmd/telegen
      - uses: actions/upload-artifact@v4
        with:
          name: telegen-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/mark-v')
    runs-on: ubuntu-latest
    needs: [build-matrix]
    steps:
      - uses: actions/download-artifact@v4
        with: { path: dist }
      - name: Flatten
        run: |
          mkdir -p upload
          find dist -type f -maxdepth 2 -mindepth 2 -exec cp {} upload/ \;
          ls -l upload
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true
          files: upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}